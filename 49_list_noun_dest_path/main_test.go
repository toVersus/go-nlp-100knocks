package main

import (
	"reflect"
	"strings"
	"testing"
)

var nounDstPathTests = []struct {
	name   string
	text   string
	expect string
}{
	{
		name: "should output single line file",
		text: `* 0 -1D 0/0 0.000000
一	名詞,数,*,*,*,*,一,イチ,イチ
EOS
EOS
* 0 2D 0/0 -0.764522
　	記号,空白,*,*,*,*,　,　,　
* 1 2D 0/1 -0.764522
吾輩	名詞,代名詞,一般,*,*,*,吾輩,ワガハイ,ワガハイ
は	助詞,係助詞,*,*,*,*,は,ハ,ワ
* 2 -1D 0/2 0.000000
猫	名詞,一般,*,*,*,*,猫,ネコ,ネコ
で	助動詞,*,*,*,特殊・ダ,連用形,だ,デ,デ
ある	助動詞,*,*,*,五段・ラ行アル,基本形,ある,アル,アル
。	記号,句点,*,*,*,*,。,。,。
EOS
* 0 2D 0/1 -1.911675
名前	名詞,一般,*,*,*,*,名前,ナマエ,ナマエ
は	助詞,係助詞,*,*,*,*,は,ハ,ワ
* 1 2D 0/0 -1.911675
まだ	副詞,助詞類接続,*,*,*,*,まだ,マダ,マダ
* 2 -1D 0/0 0.000000
無い	形容詞,自立,*,*,形容詞・アウオ段,基本形,無い,ナイ,ナイ
。	記号,句点,*,*,*,*,。,。,。
EOS
EOS
`,
		expect: `Xは -> Y
`,
	},
	{
		name: "should output empty file because input file only contains \"EOS\"",
		text: `EOS
EOS
EOS`,
		expect: "",
	},
	{
		name: "should pass a test using a example text",
		text: `EOS
* 0 5D 0/1 -1.514009
吾輩	名詞,代名詞,一般,*,*,*,吾輩,ワガハイ,ワガハイ
は	助詞,係助詞,*,*,*,*,は,ハ,ワ
* 1 2D 0/1 1.311423
ここ	名詞,代名詞,一般,*,*,*,ここ,ココ,ココ
で	助詞,格助詞,一般,*,*,*,で,デ,デ
* 2 3D 0/1 0.123057
始め	動詞,自立,*,*,一段,連用形,始める,ハジメ,ハジメ
て	助詞,接続助詞,*,*,*,*,て,テ,テ
* 3 4D 0/1 1.440044
人間	名詞,一般,*,*,*,*,人間,ニンゲン,ニンゲン
という	助詞,格助詞,連語,*,*,*,という,トイウ,トユウ
* 4 5D 0/1 -1.514009
もの	名詞,非自立,一般,*,*,*,もの,モノ,モノ
を	助詞,格助詞,一般,*,*,*,を,ヲ,ヲ
* 5 -1D 0/1 0.000000
見	動詞,自立,*,*,一段,連用形,見る,ミ,ミ
た	助動詞,*,*,*,特殊・タ,基本形,た,タ,タ
。	記号,句点,*,*,*,*,。,。,。
EOS

`,
		expect: `Xは | Yで -> 始めて -> 人間という -> ものを | 見た
Xは | Yという -> ものを | 見た
Xは | Yを | 見た
Xで -> 始めて -> Y
Xで -> 始めて -> 人間という -> Y
Xという -> Y
`,
	},
	{
		name: "should pass a test using a full text",
		text: `EOS
* 0 4D 0/1 0.421446
これ	名詞,代名詞,一般,*,*,*,これ,コレ,コレ
が	助詞,格助詞,一般,*,*,*,が,ガ,ガ
* 1 2D 0/1 1.830110
人間	名詞,一般,*,*,*,*,人間,ニンゲン,ニンゲン
の	助詞,格助詞,一般,*,*,*,の,ノ,ノ
* 2 3D 0/0 1.952873
飲む	動詞,自立,*,*,五段・マ行,基本形,飲む,ノム,ノム
* 3 4D 0/1 0.754546
煙草	名詞,一般,*,*,*,*,煙草,タバコ,タバコ
という	助詞,格助詞,連語,*,*,*,という,トイウ,トユウ
* 4 5D 0/2 1.377024
もの	名詞,非自立,一般,*,*,*,もの,モノ,モノ
で	助動詞,*,*,*,特殊・ダ,連用形,だ,デ,デ
ある	助動詞,*,*,*,五段・ラ行アル,基本形,ある,アル,アル
* 5 9D 0/1 -1.254071
事	名詞,非自立,一般,*,*,*,事,コト,コト
は	助詞,係助詞,*,*,*,*,は,ハ,ワ
* 6 9D 0/0 -1.254071
ようやく	副詞,一般,*,*,*,*,ようやく,ヨウヤク,ヨーヤク
* 7 8D 0/0 1.362323
この	連体詞,*,*,*,*,*,この,コノ,コノ
* 8 9D 0/0 -1.254071
頃	名詞,非自立,副詞可能,*,*,*,頃,コロ,コロ
* 9 -1D 0/1 0.000000
知っ	動詞,自立,*,*,五段・ラ行,連用タ接続,知る,シッ,シッ
た	助動詞,*,*,*,特殊・タ,基本形,た,タ,タ
。	記号,句点,*,*,*,*,。,。,。
EOS

`,
		expect: `Xが | Yの -> 飲む -> 煙草という | ものである
Xが | Yという | ものである
Xが -> Y
Xが -> ものである -> Y
Xが -> ものである -> 事は | Y | 知った
Xの -> 飲む -> Y
Xの -> 飲む -> 煙草という -> Y
Xの -> 飲む -> 煙草という -> ものである -> Y
Xの -> 飲む -> 煙草という -> ものである -> 事は | Y | 知った
Xという -> Y
Xという -> ものである -> Y
Xという -> ものである -> 事は | Y | 知った
Xである -> Y
Xである -> 事は | Y | 知った
Xは | Y | 知った
`,
	},
}

func TestOutputCasePattern(t *testing.T) {
	for _, testcase := range nounDstPathTests {
		t.Log(testcase.name)

		r := strings.NewReader(testcase.text)
		result := newChunkPassage(r).stringifyNounDstPath()

		if !reflect.DeepEqual(result, testcase.expect) {
			t.Errorf("node result => %#v\n  should contain => %#v\n", result, testcase.expect)
		}
	}
}

var result string

func BenchmarkNounTree(b *testing.B) {

	for i := 0; i < b.N; i++ {
		var s string
		for _, testcase := range nounDstPathTests {
			r := strings.NewReader(testcase.text)
			s = newChunkPassage(r).stringifyNounDstPath()
		}
		result = s
	}
}
